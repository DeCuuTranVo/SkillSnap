@page "/test/cache"
@using SkillSnap.Client.Models
@using SkillSnap.Client.Services
@using SkillSnap.Client.Pages.Projects
@using System.Diagnostics
@inject ProjectService ProjectService
@inject IJSRuntime JSRuntime
@inject ILogger<CacheTest> Logger

<PageTitle>Cache Test - ProjectList Component</PageTitle>

<div class="cache-test-container">
    <div class="test-header">
        <h1><i class="fas fa-memory"></i> Cache Test Suite</h1>
        <p class="lead">Testing caching behavior, cache hit/miss performance, and data consistency for ProjectList component</p>
    </div>

    <div class="test-controls">
        <div class="control-group">
            <label for="portfolioId">Portfolio User ID:</label>
            <input type="number" id="portfolioId" @bind="testPortfolioId" class="form-control" style="width: 150px; display: inline-block;" />
        </div>
        
        <div class="control-group">
            <label for="testIterations">Test Iterations:</label>
            <input type="number" id="testIterations" @bind="testIterations" min="1" max="100" class="form-control" style="width: 150px; display: inline-block;" />
        </div>
        
        <div class="control-buttons">
            <button class="btn btn-primary" @onclick="RunAllCacheTests" disabled="@isTestRunning">
                <i class="fas @(isTestRunning ? "fa-spinner fa-spin" : "fa-play")"></i>
                @(isTestRunning ? "Running Tests..." : "Run All Cache Tests")
            </button>
            <button class="btn btn-secondary" @onclick="ClearResults">
                <i class="fas fa-trash"></i> Clear Results
            </button>
        </div>
    </div>

    @if (testResults.Any())
    {
        <div class="test-results">
            <h3><i class="fas fa-chart-bar"></i> Test Results</h3>
            
            <div class="results-summary">
                <div class="summary-card success">
                    <i class="fas fa-check-circle"></i>
                    <div>
                        <span class="count">@testResults.Count(r => r.IsSuccess)</span>
                        <span class="label">Passed</span>
                    </div>
                </div>
                <div class="summary-card error">
                    <i class="fas fa-times-circle"></i>
                    <div>
                        <span class="count">@testResults.Count(r => !r.IsSuccess)</span>
                        <span class="label">Failed</span>
                    </div>
                </div>
                <div class="summary-card info">
                    <i class="fas fa-clock"></i>
                    <div>
                        <span class="count">@(testResults.Where(r => r.ExecutionTime.HasValue).Sum(r => r.ExecutionTime!.Value))ms</span>
                        <span class="label">Total Time</span>
                    </div>
                </div>
            </div>

            <div class="results-table">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Test Name</th>
                            <th>Status</th>
                            <th>Execution Time</th>
                            <th>Details</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var result in testResults.OrderBy(r => r.TestName))
                        {
                            <tr class="@(result.IsSuccess ? "table-success" : "table-danger")">
                                <td>
                                    <i class="fas @(result.IsSuccess ? "fa-check text-success" : "fa-times text-danger")"></i>
                                    @result.TestName
                                </td>
                                <td>
                                    <span class="badge @(result.IsSuccess ? "badge-success" : "badge-danger")">
                                        @(result.IsSuccess ? "PASS" : "FAIL")
                                    </span>
                                </td>
                                <td>@(result.ExecutionTime?.ToString() ?? "N/A")ms</td>
                                <td>
                                    <small class="text-muted">@result.Details</small>
                                    @if (!string.IsNullOrEmpty(result.ErrorMessage))
                                    {
                                        <br />
                                        <small class="text-danger">Error: @result.ErrorMessage</small>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }

    <!-- Test ProjectList Component -->
    <div class="component-test-section">
        <h3><i class="fas fa-cube"></i> ProjectList Component Under Test</h3>
        <div class="component-wrapper">
            @if (showComponent)
            {
                <ProjectList PortfolioId="@testPortfolioId" />
            }
            else
            {
                <div class="alert alert-info">
                    <i class="fas fa-info-circle"></i>
                    Run cache tests to see the ProjectList component in action.
                </div>
            }
        </div>
    </div>
</div>

@code {
    private int testPortfolioId = 1;
    private int testIterations = 5;
    private bool isTestRunning = false;
    private bool showComponent = false;
    private List<TestResult> testResults = new();

    private class TestResult
    {
        public string TestName { get; set; } = string.Empty;
        public bool IsSuccess { get; set; }
        public long? ExecutionTime { get; set; }
        public string Details { get; set; } = string.Empty;
        public string ErrorMessage { get; set; } = string.Empty;
    }

    private async Task RunAllCacheTests()
    {
        isTestRunning = true;
        testResults.Clear();
        showComponent = true;
        StateHasChanged();

        try
        {
            // Test 1: Data Consistency Test
            await TestDataConsistency();

            // Test 2: Multiple Requests Test
            await TestMultipleRequests();

            // Test 3: Cache Invalidation Test
            await TestCacheInvalidation();

            // Test 4: Concurrent Access Test
            await TestConcurrentAccess();

            // Test 5: Cache Hit vs Miss Test
            await TestCacheHitVsMiss();

            // Test 6: Cache Performance Test
            await TestCachePerformance();

            // Test 7: Error Handling Test
            await TestErrorHandling();

            // Test 8: Data Freshness Test
            await TestDataFreshness();

            Logger.LogInformation("Cache test suite completed with {PassedTests} passed and {FailedTests} failed", 
                testResults.Count(r => r.IsSuccess), testResults.Count(r => !r.IsSuccess));
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during cache test execution");
            testResults.Add(new TestResult
            {
                TestName = "Test Suite Execution",
                IsSuccess = false,
                ErrorMessage = ex.Message,
                Details = "Failed to complete test suite"
            });
        }
        finally
        {
            isTestRunning = false;
            StateHasChanged();
        }
    }

    private async Task TestDataConsistency()
    {
        var stopwatch = Stopwatch.StartNew();
        try
        {
            var firstCall = await ProjectService.GetProjectsByUserAsync(testPortfolioId);
            var secondCall = await ProjectService.GetProjectsByUserAsync(testPortfolioId);

            var isConsistent = firstCall.Count == secondCall.Count &&
                             firstCall.All(p1 => secondCall.Any(p2 => p2.Id == p1.Id && p2.Title == p1.Title));

            stopwatch.Stop();

            testResults.Add(new TestResult
            {
                TestName = "Data Consistency Test",
                IsSuccess = isConsistent,
                ExecutionTime = stopwatch.ElapsedMilliseconds,
                Details = $"First call: {firstCall.Count} projects, Second call: {secondCall.Count} projects",
                ErrorMessage = isConsistent ? string.Empty : "Data inconsistency detected between consecutive calls"
            });
        }
        catch (Exception ex)
        {
            stopwatch.Stop();
            testResults.Add(new TestResult
            {
                TestName = "Data Consistency Test",
                IsSuccess = false,
                ExecutionTime = stopwatch.ElapsedMilliseconds,
                ErrorMessage = ex.Message,
                Details = "Exception occurred during consistency test"
            });
        }
    }

    private async Task TestMultipleRequests()
    {
        var stopwatch = Stopwatch.StartNew();
        try
        {
            var tasks = new List<Task<List<Project>>>();
            for (int i = 0; i < testIterations; i++)
            {
                tasks.Add(ProjectService.GetProjectsByUserAsync(testPortfolioId));
            }

            var results = await Task.WhenAll(tasks);
            stopwatch.Stop();

            var firstResult = results[0];
            var allConsistent = results.All(r => r.Count == firstResult.Count &&
                                                r.All(p1 => firstResult.Any(p2 => p2.Id == p1.Id)));

            testResults.Add(new TestResult
            {
                TestName = "Multiple Requests Test",
                IsSuccess = allConsistent,
                ExecutionTime = stopwatch.ElapsedMilliseconds,
                Details = $"Made {testIterations} concurrent requests, average time: {stopwatch.ElapsedMilliseconds / testIterations}ms per request",
                ErrorMessage = allConsistent ? string.Empty : "Inconsistent results across multiple requests"
            });
        }
        catch (Exception ex)
        {
            stopwatch.Stop();
            testResults.Add(new TestResult
            {
                TestName = "Multiple Requests Test",
                IsSuccess = false,
                ExecutionTime = stopwatch.ElapsedMilliseconds,
                ErrorMessage = ex.Message,
                Details = "Exception occurred during multiple requests test"
            });
        }
    }

    private async Task TestCacheInvalidation()
    {
        var stopwatch = Stopwatch.StartNew();
        try
        {
            // First call to populate cache
            var initialData = await ProjectService.GetProjectsByUserAsync(testPortfolioId);
            
            // Wait a bit
            await Task.Delay(100);
            
            // Second call should hit cache
            var cachedData = await ProjectService.GetProjectsByUserAsync(testPortfolioId);
            
            stopwatch.Stop();

            var isValid = initialData.Count == cachedData.Count;

            testResults.Add(new TestResult
            {
                TestName = "Cache Invalidation Test",
                IsSuccess = isValid,
                ExecutionTime = stopwatch.ElapsedMilliseconds,
                Details = $"Initial: {initialData.Count} projects, Cached: {cachedData.Count} projects",
                ErrorMessage = isValid ? string.Empty : "Cache invalidation behavior is unexpected"
            });
        }
        catch (Exception ex)
        {
            stopwatch.Stop();
            testResults.Add(new TestResult
            {
                TestName = "Cache Invalidation Test",
                IsSuccess = false,
                ExecutionTime = stopwatch.ElapsedMilliseconds,
                ErrorMessage = ex.Message,
                Details = "Exception occurred during cache invalidation test"
            });
        }
    }

    private async Task TestConcurrentAccess()
    {
        var stopwatch = Stopwatch.StartNew();
        try
        {
            var concurrentTasks = new List<Task<List<Project>>>();
            
            // Create multiple concurrent tasks
            for (int i = 0; i < Math.Min(testIterations, 10); i++)
            {
                concurrentTasks.Add(Task.Run(async () => 
                {
                    await Task.Delay(i * 10); // Stagger the requests slightly
                    return await ProjectService.GetProjectsByUserAsync(testPortfolioId);
                }));
            }

            var results = await Task.WhenAll(concurrentTasks);
            stopwatch.Stop();

            var expectedCount = results[0].Count;
            var allMatch = results.All(r => r.Count == expectedCount);

            testResults.Add(new TestResult
            {
                TestName = "Concurrent Access Test",
                IsSuccess = allMatch,
                ExecutionTime = stopwatch.ElapsedMilliseconds,
                Details = $"Executed {concurrentTasks.Count} concurrent requests, all returned {expectedCount} projects",
                ErrorMessage = allMatch ? string.Empty : "Concurrent access produced inconsistent results"
            });
        }
        catch (Exception ex)
        {
            stopwatch.Stop();
            testResults.Add(new TestResult
            {
                TestName = "Concurrent Access Test",
                IsSuccess = false,
                ExecutionTime = stopwatch.ElapsedMilliseconds,
                ErrorMessage = ex.Message,
                Details = "Exception occurred during concurrent access test"
            });
        }
    }

    private async Task TestCacheHitVsMiss()
    {
        var stopwatch = Stopwatch.StartNew();
        try
        {
            // Clear any existing cache by testing with a different portfolio ID first
            var clearCacheId = testPortfolioId + 1000; // Use a different ID to potentially clear cache
            await ProjectService.GetProjectsByUserAsync(clearCacheId);
            
            // Measure cache miss (first call should be slower)
            var missStopwatch = Stopwatch.StartNew();
            var firstCall = await ProjectService.GetProjectsByUserAsync(testPortfolioId);
            missStopwatch.Stop();
            var cacheMissTime = missStopwatch.ElapsedMilliseconds;
            
            // Small delay to ensure first call completes
            await Task.Delay(10);
            
            // Measure cache hit (subsequent calls should be faster)
            var hitStopwatch = Stopwatch.StartNew();
            var secondCall = await ProjectService.GetProjectsByUserAsync(testPortfolioId);
            hitStopwatch.Stop();
            var cacheHitTime = hitStopwatch.ElapsedMilliseconds;
            
            // Test additional cache hits
            var additionalHits = new List<long>();
            for (int i = 0; i < 3; i++)
            {
                var additionalHitStopwatch = Stopwatch.StartNew();
                await ProjectService.GetProjectsByUserAsync(testPortfolioId);
                additionalHitStopwatch.Stop();
                additionalHits.Add(additionalHitStopwatch.ElapsedMilliseconds);
            }
            
            stopwatch.Stop();

            var avgHitTime = additionalHits.Any() ? additionalHits.Average() : cacheHitTime;
            var performanceImprovement = cacheMissTime > 0 ? ((cacheMissTime - avgHitTime) / (double)cacheMissTime) * 100 : 0;
            
            // Data consistency check
            var isConsistent = firstCall.Count == secondCall.Count &&
                             firstCall.All(p1 => secondCall.Any(p2 => p2.Id == p1.Id && p2.Title == p1.Title));

            // Consider test successful if:
            // 1. Data is consistent between calls
            // 2. Either cache hits are faster than misses OR times are reasonable (< 5000ms)
            var isSuccessful = isConsistent && (cacheHitTime <= cacheMissTime || cacheMissTime < 5000);

            testResults.Add(new TestResult
            {
                TestName = "Cache Hit vs Miss Test",
                IsSuccess = isSuccessful,
                ExecutionTime = stopwatch.ElapsedMilliseconds,
                Details = $"Cache miss: {cacheMissTime}ms, Cache hit: {cacheHitTime}ms, Avg subsequent hits: {avgHitTime:F1}ms, Performance improvement: {performanceImprovement:F1}%",
                ErrorMessage = isSuccessful ? string.Empty : "Cache performance or data consistency issues detected"
            });
        }
        catch (Exception ex)
        {
            stopwatch.Stop();
            testResults.Add(new TestResult
            {
                TestName = "Cache Hit vs Miss Test",
                IsSuccess = false,
                ExecutionTime = stopwatch.ElapsedMilliseconds,
                ErrorMessage = ex.Message,
                Details = "Exception occurred during cache hit/miss test"
            });
        }
    }

    private async Task TestCachePerformance()
    {
        var stopwatch = Stopwatch.StartNew();
        try
        {
            var cacheMissTimes = new List<long>();
            var cacheHitTimes = new List<long>();
            
            // Test multiple cache miss/hit cycles
            for (int cycle = 0; cycle < 3; cycle++)
            {
                // Force potential cache miss by using different IDs
                var testId = testPortfolioId + cycle;
                
                // First call (potential cache miss)
                var missStopwatch = Stopwatch.StartNew();
                var missResult = await ProjectService.GetProjectsByUserAsync(testId);
                missStopwatch.Stop();
                cacheMissTimes.Add(missStopwatch.ElapsedMilliseconds);
                
                // Subsequent calls (potential cache hits)
                for (int hit = 0; hit < 2; hit++)
                {
                    var hitStopwatch = Stopwatch.StartNew();
                    var hitResult = await ProjectService.GetProjectsByUserAsync(testId);
                    hitStopwatch.Stop();
                    cacheHitTimes.Add(hitStopwatch.ElapsedMilliseconds);
                    
                    // Verify data consistency
                    if (missResult.Count != hitResult.Count)
                    {
                        throw new InvalidOperationException($"Data inconsistency detected: miss={missResult.Count}, hit={hitResult.Count}");
                    }
                }
                
                // Small delay between cycles
                await Task.Delay(10);
            }
            
            stopwatch.Stop();

            var avgMissTime = cacheMissTimes.Average();
            var avgHitTime = cacheHitTimes.Average();
            var cacheEffectiveness = avgMissTime > 0 ? ((avgMissTime - avgHitTime) / avgMissTime) * 100 : 0;
            
            // Consider cache effective if:
            // 1. Cache hits are consistently faster than misses (or at least not significantly slower)
            // 2. Overall performance is reasonable
            var isEffective = avgHitTime <= avgMissTime * 1.1 && avgMissTime < 10000; // Allow 10% tolerance

            testResults.Add(new TestResult
            {
                TestName = "Cache Performance Test",
                IsSuccess = isEffective,
                ExecutionTime = stopwatch.ElapsedMilliseconds,
                Details = $"Avg cache miss: {avgMissTime:F1}ms, Avg cache hit: {avgHitTime:F1}ms, Cache effectiveness: {cacheEffectiveness:F1}%, Cycles tested: {cacheMissTimes.Count}",
                ErrorMessage = isEffective ? string.Empty : $"Cache performance below expectations (miss: {avgMissTime:F1}ms, hit: {avgHitTime:F1}ms)"
            });
        }
        catch (Exception ex)
        {
            stopwatch.Stop();
            testResults.Add(new TestResult
            {
                TestName = "Cache Performance Test",
                IsSuccess = false,
                ExecutionTime = stopwatch.ElapsedMilliseconds,
                ErrorMessage = ex.Message,
                Details = "Exception occurred during cache performance test"
            });
        }
    }

    private async Task TestErrorHandling()
    {
        var stopwatch = Stopwatch.StartNew();
        try
        {
            // Test with an invalid portfolio ID
            var invalidId = -999;
            var result = await ProjectService.GetProjectsByUserAsync(invalidId);
            
            stopwatch.Stop();

            // Should return empty list for invalid ID (based on service implementation)
            var isHandledCorrectly = result != null && result.Count == 0;

            testResults.Add(new TestResult
            {
                TestName = "Error Handling Test",
                IsSuccess = isHandledCorrectly,
                ExecutionTime = stopwatch.ElapsedMilliseconds,
                Details = $"Request with invalid ID ({invalidId}) returned {result?.Count ?? 0} projects",
                ErrorMessage = isHandledCorrectly ? string.Empty : "Error handling behavior is unexpected"
            });
        }
        catch
        {
            stopwatch.Stop();
            // Exception might be expected behavior
            testResults.Add(new TestResult
            {
                TestName = "Error Handling Test",
                IsSuccess = true, // Exception can be valid error handling
                ExecutionTime = stopwatch.ElapsedMilliseconds,
                Details = "Service threw exception for invalid ID (expected behavior)",
                ErrorMessage = string.Empty
            });
        }
    }

    private async Task TestDataFreshness()
    {
        var stopwatch = Stopwatch.StartNew();
        try
        {
            var firstCall = await ProjectService.GetProjectsByUserAsync(testPortfolioId);
            var firstCallTime = DateTime.UtcNow;
            
            // Wait a moment
            await Task.Delay(50);
            
            var secondCall = await ProjectService.GetProjectsByUserAsync(testPortfolioId);
            var secondCallTime = DateTime.UtcNow;
            
            stopwatch.Stop();

            // Check if data structure is consistent
            var isFresh = firstCall.Count == secondCall.Count &&
                         (secondCallTime - firstCallTime).TotalMilliseconds > 0;

            testResults.Add(new TestResult
            {
                TestName = "Data Freshness Test",
                IsSuccess = isFresh,
                ExecutionTime = stopwatch.ElapsedMilliseconds,
                Details = $"Time between calls: {(secondCallTime - firstCallTime).TotalMilliseconds:F1}ms, Data consistency maintained",
                ErrorMessage = isFresh ? string.Empty : "Data freshness check failed"
            });
        }
        catch (Exception ex)
        {
            stopwatch.Stop();
            testResults.Add(new TestResult
            {
                TestName = "Data Freshness Test",
                IsSuccess = false,
                ExecutionTime = stopwatch.ElapsedMilliseconds,
                ErrorMessage = ex.Message,
                Details = "Exception occurred during data freshness test"
            });
        }
    }

    private void ClearResults()
    {
        testResults.Clear();
        showComponent = false;
        StateHasChanged();
    }
}

<style>
    .cache-test-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .test-header {
        text-align: center;
        margin-bottom: 30px;
        padding-bottom: 20px;
        border-bottom: 2px solid #dee2e6;
    }

    .test-header h1 {
        color: #495057;
        margin-bottom: 10px;
    }

    .test-controls {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        align-items: center;
        margin-bottom: 30px;
        padding: 20px;
        background: #f8f9fa;
        border-radius: 8px;
    }

    .control-group {
        display: flex;
        flex-direction: column;
        gap: 5px;
    }

    .control-group label {
        font-weight: 600;
        color: #495057;
    }

    .control-buttons {
        margin-left: auto;
    }

    .control-buttons .btn {
        margin-left: 10px;
    }

    .test-results {
        margin-bottom: 30px;
    }

    .results-summary {
        display: flex;
        gap: 20px;
        margin-bottom: 20px;
    }

    .summary-card {
        flex: 1;
        padding: 20px;
        border-radius: 8px;
        display: flex;
        align-items: center;
        gap: 15px;
        color: white;
    }

    .summary-card.success {
        background: linear-gradient(135deg, #28a745, #20c997);
    }

    .summary-card.error {
        background: linear-gradient(135deg, #dc3545, #e83e8c);
    }

    .summary-card.info {
        background: linear-gradient(135deg, #17a2b8, #6610f2);
    }

    .summary-card i {
        font-size: 2rem;
    }

    .summary-card .count {
        display: block;
        font-size: 1.5rem;
        font-weight: bold;
    }

    .summary-card .label {
        display: block;
        font-size: 0.9rem;
        opacity: 0.9;
    }

    .results-table {
        background: white;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .component-test-section {
        padding: 20px;
        background: #f8f9fa;
        border-radius: 8px;
        margin-top: 30px;
    }

    .component-wrapper {
        margin-top: 15px;
        padding: 20px;
        background: white;
        border-radius: 8px;
        border: 1px solid #dee2e6;
    }

    .badge-success {
        background-color: #28a745;
    }

    .badge-danger {
        background-color: #dc3545;
    }

    .table-success {
        background-color: rgba(40, 167, 69, 0.1);
    }

    .table-danger {
        background-color: rgba(220, 53, 69, 0.1);
    }
</style>